"""Schemas describing automation insights and suggested actions."""

from datetime import datetime
from enum import Enum
from typing import Dict, Optional

from pydantic import Field

from .common import IdentifiedModel


class AutomationCategory(str, Enum):
    """Top-level area the automation task belongs to."""

    CLIENT = "client"
    PROJECT = "project"
    FINANCE = "finance"
    SUPPORT = "support"
    MARKETING = "marketing"
    MONITORING = "monitoring"
    HR = "hr"


class AutomationPriority(str, Enum):
    """Relative urgency for the recommended action."""

    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


class AutomationTask(IdentifiedModel):
    """Suggested follow-up generated by the automation engine."""

    category: AutomationCategory
    summary: str
    priority: AutomationPriority = AutomationPriority.MEDIUM
    due_at: Optional[datetime] = None
    suggested_assignee: Optional[str] = None
    details: Optional[str] = None
    related_ids: Dict[str, str] = Field(default_factory=dict)
    action_label: Optional[str] = None
    action_url: Optional[str] = None


class AutomationDigest(IdentifiedModel):
    """Collection of tasks produced during a single automation pass."""

    generated_at: datetime
    tasks: list[AutomationTask] = Field(default_factory=list)

